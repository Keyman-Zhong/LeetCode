//这道题和合并两个链表的思路类似
//一开始想着先两两合并，考虑了一下时间复杂度过于夸张
//可以去简化合并的顺序
//利用分治，分而治之，令其简化至两两结合
//之后再利用之前合并两个链表的算法进行合并
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty())return NULL;
        int n=lists.size();
        while(n>1)
        {
            int k=(n+1)/2;
            for(int i=0;i<n/2;++i)
            {
                lists[i]=mergeList(lists[i],lists[i+k]);
            }
            n=k;
        }
        return lists[0];
    }
ListNode* mergeList(ListNode* l1,ListNode* l2)
{
    ListNode *dummy=new ListNode(-1),*cur=dummy;
    while(l1&&l2)
    {
        if(l1->val<l2->val){
            cur->next=l1;
            l1=l1->next;}
        else {
            cur->next=l2;
            l2=l2->next;}
        cur=cur->next;
    }
    if(l1)
        cur->next=l1;
    else if(l2)
        cur->next=l2;
    return dummy->next;
}
};
