//在二进制的加法中，会出现两个字符串不相等的情况，所以先将短的字符串补零，令两字符串长度相同，在进行加法运算
//通过carry变量来决定是否要进位
//利用字符串-'0'来实现字符转化为数字
class Solution {
public:
    string addBinary(string a, string b) {
        string result;
        int na = a.size();
        int nb = b.size();
        int n = max(na, nb);
        bool carry = false;
        if (na > nb) {
            for (int i = 0; i < na - nb; ++i) b.insert(b.begin(), '0');
        }
        else if (na < nb) {
            for (int i = 0; i < nb - na; ++i) a.insert(a.begin(), '0');
        }
        for (int i = n - 1; i >= 0; --i) {
            int tmp = 0;
            if (carry) tmp = (a[i] - '0') + (b[i] - '0') + 1;
            else tmp = (a[i] - '0') + (b[i] - '0');
            if (tmp == 0) {
                result.insert(result.begin(), '0');
                carry = false;
            }
            else if (tmp == 1) {
                result.insert(result.begin(), '1');
                carry = false;
            }
            else if (tmp == 2) {
                result.insert(result.begin(), '0');
                carry = true;
            }
            else if (tmp == 3) {
                result.insert(result.begin(), '1');
                carry = true;
            }
        }
        if (carry) result.insert(result.begin(), '1');
        return result;
    }
};
