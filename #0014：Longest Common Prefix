//这题一开始没想出来，后面看到一些大神的思路发现自己想的太复杂了。
//其实思路非常简单，就是先将第一个字符串的首字母标定出来作为一个变量。然后循环和其他字符串的首字母比较。两个循环就可以解决。
//一开始一直纠结strs[i][j]格式能不能使用，还想创建一个二维数组将几个string重新记录，C++基础还是没学好啊。
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty())return"";//如果为空，直接返回空字符
        string res="";//定义保存量以记录相同的字符
        //循环从第一个字符串第一个字母开始，以第一个字符串作为基准进行遍历
        for(int i=0;i<strs[0].size();++i){
            char c=strs[0][i];//记录第一个字符串第一个字母
            //和其他字符串相应的字母进行比较
            for(int j=1;j<strs.size();++j){
            //这里可能考虑不太全，一些大神会在这里添加多一个附加条件
            //在遍历的过程中，如果某一行没有了，说明其为最短的单词，因为共同前缀的长度不能长于最短单词，所以此时返回已经找出的共同前缀。
            //具体为i<strs[i].size
                if(c==strs[j][i]){;}
                    else{return res;}
            } 
            res.push_back(c);
        }
           return res;
    }
};
